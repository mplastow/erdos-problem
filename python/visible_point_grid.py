# Generated by ChatGPT on May 15, 2025
# Last edited by Matt Plastow on May 16, 2025

import numpy as np
import matplotlib.pyplot as plt
from primePy import primes


"""
Specifies a grid as used in this program.
"""
class GridSpec:
    def __init__(self, min_x: int, min_y: int, max_x: int, max_y: int, dim_x: int, dim_y: int):
        self.min_x = min_x
        self.max_x = max_x
        self.min_y = min_y
        self.max_y = max_y
        self.dim_x = dim_x
        self.dim_y = dim_y

"""
Calculates visibility from the origin. The criterion for visibility is that the
greatest common divisor of the x- and y-coordinates is 1.
"""
def is_visible(coord_x: int, coord_y: int) -> bool:
    if np.gcd(coord_x, coord_y) == 1:
        # print(f"({x},{y}) is visible")
        return True
    else:
        return False

"""
Generates an array representing a grid of points from (min_x, min_y) to (max_x, max_y), inclusive. 
The element corresponding to each point has the value 1 if it is visible from the origin and 0 if it is not.
"""
def generate_vis_grid(grid: GridSpec):
    result = []
    for coord_y in range(grid.min_y, grid.max_y):
        for coord_x in range(grid.min_x, grid.max_x):
            vis = 1 if is_visible(coord_x, coord_y) else 0
            result.append(vis)
    return result

"""
Determines whether a number is prime. Searches a precomputed array prime numbers
to avoid recomputing primes dynamically.
"""
def is_prime(num: int) -> bool:
    return num in precomp_primes

"""
"""
def mark_coprimes(grid: GridSpec, data: list[int]) -> None:
    """Marks grid points with coprime coordinates as inaccessible."""
    for index_y in range(grid.dim_y):
        coord_y = grid.min_y + index_y
        if is_prime(coord_y):
            for index_x in range(grid.dim_x):
                coord_x = grid.min_x + index_x
                if is_prime(coord_x):
                    index = index_x + index_y * grid.dim_x
                    data[index] = 0

"""
Takes an array generated by `generate_vis_grid`.
Works backward from the upper-left corner of the grid to mark all dead ends.
A "dead end" is a point that does not lie on a path that leads out of the grid.
"""
def mark_deadends(grid: GridSpec, data: list[int]):
    for coord_y in range(grid.dim_y - 2, 0, -1):
        for coord_x in range(grid.dim_x - 2, 0, -1):
            index = coord_x + (coord_y * grid.dim_x)
            index_one_right = index + 1
            index_one_above = index + grid.dim_x

            # Criteria for a dead-end point:
            # the point to the right is blocked AND the point above is blocked
            if data[index_one_right] == 0 and data[index_one_above] == 0:
                data[index] = 0

"""
Plots a grid of points generated by `generate_vis_grid`.
"""
def plot_visibility_grid(grid: GridSpec, data: list[int]):
    # Convert to 2D NumPy array
    grid_array = np.array(data, dtype=np.uint8).reshape((grid.dim_y, grid.dim_x))

    # Get coordinates of visible points (value == 1)
    y_indices, x_indices = np.nonzero(grid_array)

    # Convert indices to actual x, y coordinates
    x_coords = x_indices + grid.min_x
    y_coords = y_indices + grid.min_y

    # Plot visible points
    plt.figure(figsize = (10, 10))
    plt.scatter(x_coords, y_coords, color = 'black', s = 6)
    plt.title('Visible points with no coprimes and no dead ends')
    plt.xlabel('x')
    plt.ylabel('y')
    plt.xlim(grid.min_x, grid.max_x + 1)
    plt.ylim(grid.min_y, grid.max_y + 1)
    plt.grid(True)
    plt.axis('equal')
    plt.show()

# # # # # # # # # # # 
# Program entry point
# # # # # # # # # # # 

precomp_primes: list[int] = primes.upto(11000)

# The min and max values in the point grid.
# Intervals in Python are right-open (e.g. max_x must be 51 to include x = 50)
min_x = 10020
max_x = 10101 
min_y = 10020
max_y = 10101

dim_x = max_x - min_x
dim_y = max_y - min_y

grid_spec = GridSpec(min_x = min_x, max_x = max_x, min_y = min_y, max_y = max_y, dim_x = dim_x, dim_y = dim_y)

data = generate_vis_grid(grid_spec)

# Commenting out the line below will include coprime points in the plot
mark_coprimes(grid_spec, data)

# Commenting out the line below will include dead-end points in the plot
mark_deadends(grid_spec, data)

plot_visibility_grid(grid_spec, data)