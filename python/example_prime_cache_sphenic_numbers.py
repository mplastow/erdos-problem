# Prime cache example: sphenic numbers

# Import and initialize prime cache
from prime_cache import (
    load_or_generate_primes
)

# EDIT THIS: specify the number to generate primes and semiprimes up to
prime_semiprime_max = 1000000

primes: set[int] = load_or_generate_primes(prime_semiprime_max)



################
# All code past this point has been generated by ChatGPT
################

# Generated by the following prompt:
"""
I'd like to generate all sphenic numbers up to a number n.
Write some python code that does this efficiently.
Assume I have an existing function is_prime(n: int) -> bool for prime checking and
a primes: set[int] that already contains all primes needed for the task.
"""
from itertools import combinations
from typing import List

def generate_sphenic_numbers(n: int, primes: set[int]) -> List[int]:
    primes_list = sorted(p for p in primes if p <= n // 3)
    sphenic_numbers = []

    # Iterate through all combinations of 3 distinct primes
    for p1, p2, p3 in combinations(primes_list, 3):
        product = p1 * p2 * p3
        if product <= n:
            sphenic_numbers.append(product)
        else:
            # Since primes_list is sorted, larger combinations will also exceed n
            continue

    return sorted(sphenic_numbers)

# Generated by the following prompt:
"""Give an example of the above code being used"""
n = 20000
sphenic_numbers = generate_sphenic_numbers(n, primes)

print(f"Sphenic numbers up to {n}:")
print(sphenic_numbers)