# Prime cache example: sphenic numbers

# Import and initialize prime cache
from prime_cache import (
    init_cache_primes
)

# EDIT THIS: specify the number to generate primes and semiprimes up to
prime_semiprime_max = 1000000

primes: set[int] = init_cache_primes(prime_semiprime_max)



################
# All code below was generated by ChatGPT
################

# Generated by the following prompt:
"""
I'd like to generate all sphenic numbers up to a number n.
Write some Python code that does this efficiently.
Assume I have an existing function is_prime(n: int, primes: set[int]) -> bool for checking primes and
a set primes: set[int] that already contains all primes needed for the task.
"""
from itertools import combinations

def generate_sphenic_numbers(n: int, primes: set[int]) -> list[int]:
    sphenic_numbers = set()
    sorted_primes = sorted(p for p in primes if p <= n // 3)

    for a, b, c in combinations(sorted_primes, 3):
        product = a * b * c
        if product <= n:
            sphenic_numbers.add(product)
        else:
            # Since primes are sorted, any further combinations with larger primes will be larger
            continue

    return sorted(sphenic_numbers)

# Generated by the following prompt:
"""Give an example of the above code being used"""
n = 10000
sphenic_numbers = generate_sphenic_numbers(n, primes)

print(f"Sphenic numbers up to {n}:")
print(sphenic_numbers)